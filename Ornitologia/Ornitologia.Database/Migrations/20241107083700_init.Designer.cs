// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ornitologia.Database;

#nullable disable

namespace Ornitologia.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241107083700_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ornitologia.Database.Entities.BirdEntity", b =>
                {
                    b.Property<int>("RingNumber")
                        .HasColumnType("int");

                    b.Property<string>("DateOfRinging")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("SpeciesEntityId")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<string>("WhereRinged")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RingNumber");

                    b.HasIndex("MemberId");

                    b.HasIndex("SpeciesEntityId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Bird");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.ClassEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubclassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubclassId")
                        .IsUnique();

                    b.ToTable("BirdClass");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.MemberEntity", b =>
                {
                    b.Property<int>("MembershipCardNumber")
                        .HasColumnType("int");

                    b.Property<string>("EndOfMembership")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartOfMembership")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.HasKey("MembershipCardNumber");

                    b.HasIndex("StreetId")
                        .IsUnique();

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.NoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BirdId")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BirdId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MemberId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.SpeciesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("SpeciesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.StreetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("Street");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.SubclassEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SubclassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TribeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TribeId")
                        .IsUnique();

                    b.ToTable("Subclass");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.TribeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TribeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tribe");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.BirdEntity", b =>
                {
                    b.HasOne("Ornitologia.Database.Entities.MemberEntity", "Member")
                        .WithMany("Birds")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ornitologia.Database.Entities.SpeciesEntity", null)
                        .WithMany("Birds")
                        .HasForeignKey("SpeciesEntityId");

                    b.HasOne("Ornitologia.Database.Entities.SpeciesEntity", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.ClassEntity", b =>
                {
                    b.HasOne("Ornitologia.Database.Entities.SubclassEntity", "Subclass")
                        .WithOne("Class")
                        .HasForeignKey("Ornitologia.Database.Entities.ClassEntity", "SubclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subclass");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.MemberEntity", b =>
                {
                    b.HasOne("Ornitologia.Database.Entities.StreetEntity", "Street")
                        .WithOne("Member")
                        .HasForeignKey("Ornitologia.Database.Entities.MemberEntity", "StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.NoteEntity", b =>
                {
                    b.HasOne("Ornitologia.Database.Entities.BirdEntity", "Bird")
                        .WithMany("Notes")
                        .HasForeignKey("BirdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ornitologia.Database.Entities.StreetEntity", "Location")
                        .WithMany("Notes")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ornitologia.Database.Entities.MemberEntity", "Member")
                        .WithMany("Notes")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bird");

                    b.Navigation("Location");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.SpeciesEntity", b =>
                {
                    b.HasOne("Ornitologia.Database.Entities.ClassEntity", "Class")
                        .WithOne("Species")
                        .HasForeignKey("Ornitologia.Database.Entities.SpeciesEntity", "ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.StreetEntity", b =>
                {
                    b.HasOne("Ornitologia.Database.Entities.CityEntity", "City")
                        .WithOne("Street")
                        .HasForeignKey("Ornitologia.Database.Entities.StreetEntity", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.SubclassEntity", b =>
                {
                    b.HasOne("Ornitologia.Database.Entities.TribeEntity", "Tribe")
                        .WithOne("Subclass")
                        .HasForeignKey("Ornitologia.Database.Entities.SubclassEntity", "TribeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tribe");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.BirdEntity", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.CityEntity", b =>
                {
                    b.Navigation("Street")
                        .IsRequired();
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.ClassEntity", b =>
                {
                    b.Navigation("Species")
                        .IsRequired();
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.MemberEntity", b =>
                {
                    b.Navigation("Birds");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.SpeciesEntity", b =>
                {
                    b.Navigation("Birds");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.StreetEntity", b =>
                {
                    b.Navigation("Member")
                        .IsRequired();

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.SubclassEntity", b =>
                {
                    b.Navigation("Class")
                        .IsRequired();
                });

            modelBuilder.Entity("Ornitologia.Database.Entities.TribeEntity", b =>
                {
                    b.Navigation("Subclass")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
